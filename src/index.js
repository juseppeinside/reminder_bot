require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const {
  parseMessage,
  parseDeleteCommand,
  parseNotificationCommand,
} = require("./utils");
const { processUserMessage } = require("./services/botMessageProcessor");
const {
  addNotification,
  getUserNotifications,
  deleteNotification,
  getAllUsers,
} = require("./db");
const { initScheduler } = require("./scheduler");
const config = require("../config");
const {
  WELCOME_MESSAGE,
  HELP_MESSAGE,
  EMPTY_NOTIFICATIONS_LIST,
  NOTIFICATION_LIST_ERROR,
  NOTIFICATION_DELETION_ERROR,
  INSUFFICIENT_PERMISSIONS,
  NOTIFICATION_SENT,
  USERS_LIST_ERROR,
} = require("./constants/botMessages");
const { formatDateForDisplay, dayNumberToName } = require("./utils/dateTime");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(config.TELEGRAM_BOT_TOKEN, { polling: true });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on("polling_error", (error) => {
  console.error("–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:", error);
});

// –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
initScheduler(bot);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(chatId, WELCOME_MESSAGE);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /users
bot.onText(/\/users/, async (msg) => {
  const chatId = msg.chat.id;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  if (
    config.ADMIN_USER_ID &&
    chatId.toString() !== config.ADMIN_USER_ID.toString()
  ) {
    await bot.sendMessage(chatId, INSUFFICIENT_PERMISSIONS);
    return;
  }

  try {
    const users = await getAllUsers();
    await bot.sendMessage(
      chatId,
      `üìä –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`
    );
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err);
    await bot.sendMessage(chatId, USERS_LIST_ERROR);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  await bot.sendMessage(chatId, HELP_MESSAGE.replace("{userId}", userId));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list
bot.onText(/\/list/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    const notifications = await getUserNotifications(chatId);

    if (notifications.length === 0) {
      await bot.sendMessage(chatId, EMPTY_NOTIFICATIONS_LIST);
      return;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Å—Ç–∏
    const splitIntoChunks = (notifications) => {
      const chunks = [];
      let currentChunk = [];
      let currentLength = 0;
      const maxLength = 3500; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram

      for (const notification of notifications) {
        // –û—Ü–µ–Ω–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—É—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        let notificationText = `üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${notification.message}\n`;
        notificationText += `üïí –í—Ä–µ–º—è: ${notification.times.join(", ")}\n`;
        notificationText += `üÜî ID: ${notification.id}\n`;

        if (notification.type === "daily") {
          notificationText += `üìÖ –¢–∏–ø: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ\n`;

          // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
          if (
            notification.days_of_week &&
            notification.days_of_week.length > 0
          ) {
            const daysText = notification.days_of_week
              .map((day) => dayNumberToName(day))
              .join(", ");

            notificationText += `üìÜ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏: ${daysText}\n`;
          } else {
            notificationText += `‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${
              notification.days_left === 36500
                ? "‚ôæÔ∏è (–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)"
                : notification.days_left
            }\n`;
          }

          notificationText += "\n";
        } else if (notification.type === "monthly") {
          notificationText += `üóìÔ∏è –¢–∏–ø: –ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ (${notification.day_of_month} —á–∏—Å–ª–æ)\n`;
          notificationText += `‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—è—Ü–µ–≤: ${
            notification.months_left === 36500 / 30
              ? "‚ôæÔ∏è (–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)"
              : notification.months_left
          }\n\n`;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        if (currentLength + notificationText.length > maxLength) {
          // –ï—Å–ª–∏ –¥–∞, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–∞–Ω–∫
          chunks.push(currentChunk);
          currentChunk = [notificationText];
          currentLength = notificationText.length;
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞–Ω–∫—É
          currentChunk.push(notificationText);
          currentLength += notificationText.length;
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
      if (currentChunk.length > 0) {
        chunks.push(currentChunk);
      }

      return chunks;
    };

    // –†–∞–∑–±–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
    const chunks = splitIntoChunks(notifications);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for (let i = 0; i < chunks.length; i++) {
      const messageHeader =
        i === 0
          ? `üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—á–∞—Å—Ç—å ${i + 1}/${
              chunks.length
            }):\n\n`
          : `üìã –ß–∞—Å—Ç—å ${i + 1}/${chunks.length}:\n\n`;

      const message = messageHeader + chunks[i].join("");
      await bot.sendMessage(chatId, message);
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", err);
    await bot.sendMessage(chatId, NOTIFICATION_LIST_ERROR);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
bot.onText(/\/delete (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const text = match[0];

  const result = parseDeleteCommand(text);

  if (!result.success) {
    await bot.sendMessage(chatId, "‚ùå " + result.error);
    return;
  }

  try {
    const deleted = await deleteNotification(result.id);

    if (deleted) {
      await bot.sendMessage(chatId, `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å uuid ${result.id} —É–¥–∞–ª–µ–Ω–æ`);
    } else {
      await bot.sendMessage(
        chatId,
        `‚ùì –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å uuid ${result.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`
      );
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", err);
    await bot.sendMessage(chatId, NOTIFICATION_DELETION_ERROR);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
bot.onText(/\/notification[\s\S]*/, async (msg, match) => {
  const chatId = msg.chat.id;
  const text = msg.text; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ match[0]

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  if (
    config.ADMIN_USER_ID &&
    chatId.toString() !== config.ADMIN_USER_ID.toString()
  ) {
    await bot.sendMessage(chatId, INSUFFICIENT_PERMISSIONS);
    return;
  }

  const result = parseNotificationCommand(text);

  if (!result.success) {
    await bot.sendMessage(chatId, "‚ùå " + result.error);
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await getAllUsers();

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 10 —á–µ–ª–æ–≤–µ–∫
    const batchSize = 10;
    let successCount = 0;
    let errorCount = 0;

    for (let i = 0; i < users.length; i += batchSize) {
      const batch = users.slice(i, i + batchSize);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞–∫–µ—Ç–Ω–æ
      const sendPromises = batch.map(async (userId) => {
        try {
          await bot.sendMessage(userId, result.message, { parse_mode: "HTML" });
          successCount++;
          return true;
        } catch (err) {
          // –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ —Å HTML, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          try {
            await bot.sendMessage(userId, result.message);
            successCount++;
            return true;
          } catch (secondErr) {
            console.error(
              `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`,
              secondErr
            );
            errorCount++;
            return false;
          }
        }
      });

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
      await Promise.all(sendPromises);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
      if (users.length > 20 && (i + batchSize) % 20 === 0) {
        await bot.sendMessage(
          chatId,
          `‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: ${Math.min(i + batchSize, users.length)}/${
            users.length
          } (${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} —Å –æ—à–∏–±–∫–∞–º–∏)`
        );
      }

      // –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
      if (i + batchSize < users.length) {
        await delay(1000);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    await bot.sendMessage(chatId, `${NOTIFICATION_SENT}`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:", err);
    await bot.sendMessage(
      chatId,
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
bot.on("message", async (msg) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (msg.text && msg.text.startsWith("/")) {
    return;
  }

  const chatId = msg.chat.id;
  const text = msg.text;

  if (!text) {
    return;
  }

  try {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const result = await processUserMessage(text, chatId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.sendMessage(
      chatId,
      result.success ? result.message : result.error
    );
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
    await bot.sendMessage(
      chatId,
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    );
  }
});

console.log("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on("SIGINT", () => {
  bot.stopPolling();
  console.log("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  process.exit(0);
});
